import configparser
import random

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from database import new_user, get_info_user, select_worker, select_bit_button, select_min_dep, add_balance, \
    get_referral, new_referral, add_count_ref, get_all_promo, get_all_promo_no_user, plus_disable_promo, update_rules, \
    language_change, get_lang_user, dep_pro, select_deposit_pro, get_refes, minus_balance, get_procent_worker, \
    select_worker_count, update_worker, update_worke1r, info_trade, qiwi_token, btc_adres
from loader import dp, bot

from pyqiwip2p import QiwiP2P

from state.states import deposit_qiwi, withdraw_money, Enter_promo, Choice_language

sstart_markup = ReplyKeyboardMarkup(resize_keyboard=True,
                                   keyboard=[
                                       [
                                           KeyboardButton(text='–°—á—ë—Ç ECN üìä'),
                                           KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å üë®üèª‚Äçüíª')
                                       ],
                                       [
                                           KeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å üíµ'),
                                           KeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏ –∞–∫—Ç–∏–≤—ã üí∏')
                                       ],
                                       [
                                           KeyboardButton(text='üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†Ô∏è'),
                                           KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å ‚Ñπ')
                                       ]
                                   ])

@dp.message_handler(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å ‚Ñπ')
async def wqewqe(message: types.Message):
    text = info_trade()[0]
    await message.answer(text)

@dp.callback_query_handler(text='cancel', state='*')
async def qwewqe(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    work = select_worker(user_id=call.from_user.id)[0]
    info_user = get_info_user(user_id=call.from_user.id)[0]
    photo = open('photo/n1.jpg', 'rb')
    text = ''
    if info_user[10] == 0:
        text = '‚ùå'
    elif info_user[10] == 1:
        text = '‚úÖ'
    await call.message.answer_photo(photo=photo,
                                        caption='üßë‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n'
                                       f'üí∞–î–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info_user[2]}‚ÇΩ\n'
                                       f'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: 0 –¥.\n'
                                       f'ü§ù –°–¥–µ–ª–æ–∫: 0\n'
                                       f'üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {text}\n\n'
                                       f'üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {random.randint(600, 610)}',
                                        reply_markup=sstart_markup)

@dp.message_handler(text='–ü—Ä–æ—Ñ–∏–ª—å üë®üèª‚Äçüíª', state='*')
async def kewjiwq(message: types.Message):
    info_user = get_info_user(user_id=message.from_user.id)[0]
    photo = open('photo/n1.jpg', 'rb')
    text = ''
    if info_user[10] == 0:
        text = '‚ùå'
    elif info_user[10] == 1:
        text = '‚úÖ'
    config = configparser.ConfigParser()
    config.read("settings.ini")
    url = config["Weintelegram"]["link"]
    markup = InlineKeyboardMarkup(
    )
    markup.add(
        InlineKeyboardButton(text='–ú—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º', url=f'{url}')
    )
    await message.answer_photo(photo=photo,
                               caption='üßë‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n'
                                       f'üí∞–î–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info_user[2]}‚ÇΩ\n'
                                       f'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: 0 –¥.\n'
                                       f'ü§ù –°–¥–µ–ª–æ–∫: 0\n'
                                       f'üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {text}\n\n'
                                       f'üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {random.randint(600, 610)}', reply_markup=markup)


@dp.message_handler(text='–ù–∞–∑–∞–¥')
@dp.message_handler(commands='start', state='*')
async def kewjiwq(message: types.Message):

    new_user(user_id=message.from_user.id, name=message.from_user.get_mention(as_html=True), fullname=message.from_user.full_name)
    if message.get_args():
        if int(message.from_user.id) != int(message.get_args()):
            if get_referral(message.from_user.id)[0] == 'n':
                new_referral(referral=int(message.get_args()), user_id=message.from_user.id)
                add_count_ref(user_id=int(message.get_args()))
                await bot.send_message(chat_id=int(message.get_args()), text=f'–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à—ë–ª '
                                                                             f'{message.from_user.get_mention(as_html=True)}\n')
    rules = get_info_user(user_id=message.from_user.id)[0][12]
    if rules == 0:
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–ü—Ä–æ—á–∏—Ç–∞–ª –∏ —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏', callback_data='cancel')
                ]
            ]
        )
        text = '''
–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º.\n\
1. –ü–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ò–Ω–≤–µ—Å—Ç–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –∏ –≤—ã–≥–æ–¥—ã, –Ω–∞–ª–æ–≥–æ–≤—ã–µ, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ, –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏, —Å–≤–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–∫–∏–µ —Ä–∏—Å–∫–∏. –ö–ª–∏–µ–Ω—Ç —Ç–∞–∫–∂–µ –Ω–µ—Å–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–ø–ª–∞—Ç—É –±—Ä–æ–∫–µ—Ä—Å–∫–∏—Ö –∏ –¥–µ–ø–æ–∑–∏—Ç–∞—Ä–Ω—ã—Ö —É—Å–ª—É–≥\n\
2. –ü—Ä–∏–Ω–∏–º–∞—è –ø—Ä–∞–≤–∏–ª–∞, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ —Å–æ –≤—Å–µ–º–∏ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏!\n\
3. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/–æ–±–º–∞–Ω –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã! –ö–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫—Ä—É–ø–Ω–æ–π —Å—É–º–º—ã —Å—Ä–µ–¥—Å—Ç–≤.\n\
4. –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã!\n\
5. –°–∫—Ä–∏–ø—Ç—ã, —Å—Ö–µ–º—ã, —Ç–∞–∫—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!\n\
6. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤—ã—è–≤–ª–µ–Ω—ã –≤—ã—à–µ–ø–µ—Ä—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏, –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤!\n\
7. –í —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –í–∞—Å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –í–∞—à—É –ª–∏—á–Ω–æ—Å—Ç—å –∏ –í–∞—à–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ.\n\
–í—ã –∏–≥—Ä–∞–µ—Ç–µ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã, –ø–æ–∫—É–ø–∞—è –∏—Ö –∑–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–µ–Ω—å–≥–∏. –õ—é–±–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ–º! –í—ã–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞, –≤ 5 —Ä–∞–∑ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–≥–æ —Å —Å—É–º–º—É –í–∞—à–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –í—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∞ —Ç–∞–∫ –∂–µ –≤–æ–ø—Ä–æ—Å–∞–º –∏–≥—Ä—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ –±–æ—Ç—É.\n\
–ü–∏—à–∏—Ç–µ —Å—Ä–∞–∑—É –ø–æ –¥–µ–ª—É, –∞ –Ω–µ ¬´–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –¢—É—Ç?¬ª\n\
–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏–∑–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ —á–µ—Ç–∫–æ –∏ —è—Å–Ω–æ.\n\n\
–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ."
        '''
        
        await message.answer(text, reply_markup=markup)
        update_rules(user_id=message.from_user.id)
    else:
        idid = select_worker_count(user_id=message.from_user.id)[0]
        if int(idid) == 1:
            start_markup = ReplyKeyboardMarkup(resize_keyboard=True,
                                               keyboard=[
                                                   [
                                                       KeyboardButton(text='–°—á—ë—Ç ECN üìä'),
                                                       KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å üë®üèª‚Äçüíª')
                                                   ],
                                                   [
                                                       KeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å üíµ'),
                                                       KeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏ –∞–∫—Ç–∏–≤—ã üí∏')
                                                   ],
                                                   [
                                                       KeyboardButton(text='üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†Ô∏è'),
                                                       KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å ‚Ñπ')
                                                   ],
                                                   [
                                                       KeyboardButton(text='‚ö° –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞')
                                                   ]
                                               ])

            info_user = get_info_user(user_id=message.from_user.id)[0]
            photo = open('photo/n1.jpg', 'rb')
            text = ''
            if info_user[10] == 0:
                text = '‚ùå'
            elif info_user[10] == 1:
                text = '‚úÖ'
            await message.answer_photo(photo=photo,
                                       caption='üßë‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n'
                                               f'üí∞–î–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info_user[2]}‚ÇΩ\n'
                                               f'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: 0 –¥.\n'
                                               f'ü§ù –°–¥–µ–ª–æ–∫: 0\n'
                                               f'üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {text}\n\n'
                                               f'üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {random.randint(600, 610)}',
                                       reply_markup=start_markup)
        else:
            info_user = get_info_user(user_id=message.from_user.id)[0]
            photo = open('photo/n1.jpg', 'rb')
            text = ''
            if info_user[10] == 0:
                text = '‚ùå'
            elif info_user[10] == 1:
                text = '‚úÖ'
            await message.answer_photo(photo=photo,
                                       caption='üßë‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n'
                                               f'üí∞–î–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {info_user[2]}‚ÇΩ\n'
                                               f'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: 0 –¥.\n'
                                               f'ü§ù –°–¥–µ–ª–æ–∫: 0\n'
                                               f'üìë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {text}\n\n'
                                               f'üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {random.randint(600, 610)}',
                                       reply_markup=sstart_markup)

@dp.message_handler(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å üíµ', state='*')
async def wqewq(message: types.Message, state: FSMContext):
    await state.finish()
    photo = open('photo/n3.jpg', 'rb')
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É', callback_data='o_bank')
            ],
            [
                InlineKeyboardButton(text='ü•ù –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ QIWI', callback_data='o_qiwi')
            ],
            [
                InlineKeyboardButton(text='üí± –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ BTC', callback_data='o_btc')
            ],
            [
                InlineKeyboardButton(text='üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='o_gift')
            ]
        ]
    )
    await message.answer_photo(photo=photo,
                               caption='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞',
                               reply_markup=markup)

#

@dp.callback_query_handler(text='o_qiwi')
async def qwewqe(call: types.CallbackQuery):
    await call.message.delete()
    min_dep = select_min_dep(user_id=call.from_user.id)[0]
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n'
                              f'<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - {min_dep}‚ÇΩ</i>')
    await deposit_qiwi.q1.set()

@dp.message_handler(state=deposit_qiwi.q1)
async def qwewqe(message: types.Message, state: FSMContext):
    try:
        count = int(message.text)
        min_dep = select_min_dep(user_id=message.from_user.id)[0]
        if min_dep < count or min_dep == count:
            tonen = qiwi_token()[0]
            p2p = QiwiP2P(auth_key=f'{tonen}')
            c_count = random.randint(1111, 1111111)
            lifetime = 5
            global bill

            bill = p2p.bill(amount=int(message.text), lifetime=lifetime, comment=str(c_count))

            markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=f'{bill.pay_url}')
                    ],
                    [
                        InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='opl')
                    ],
                    [
                        InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
                    ]
                ]
            )
            await state.update_data(count=int(message.text))
            photo = open('photo/n4.jpg', 'rb')
            refer_id = get_info_user(user_id=message.from_user.id)[0][3]
            markup_oplatit = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', callback_data=f'opl_{message.from_user.id}_{int(message.text)}')
                    ]
                ]
            )
            await bot.send_message(chat_id=f'{refer_id}', text=f'<b>–ú–∞–º–æ–Ω—Ç —Å –ª–æ–≥–∏–Ω–æ–º @{message.from_user.username}</b>\n'
                                                               f'–•–æ—á–µ—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ <code>{int(message.text)}‚ÇΩ</code>',
                                   reply_markup=markup_oplatit)
            await message.answer_photo(photo=photo, caption=
                                 f'<b>‚ôª –û–ø–ª–∞—Ç–∞ QIWI/–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π: <a href="{bill.pay_url}">–û–ü–õ–ê–¢–ê</a></b>\n\n'
                                 f'<b>–°—É–º–º–∞:</b> <code>{int(message.text)}‚ÇΩ</code>\n'
                                 f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <code>{c_count}</code>\n\n'
                                 f'<i>–í–ê–ñ–ù–û! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.</i>', reply_markup= markup)
            await deposit_qiwi.q2.set()
        else:
            await message.answer('<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>')
            await state.finish()
    except Exception:
        await message.answer('<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>')
        await state.finish()

@dp.callback_query_handler(state=deposit_qiwi.q2)
async def qwewqe(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    count = data.get('count')
    tonen = qiwi_token()[0]
    p2p = QiwiP2P(auth_key=f'{tonen}')
    status = p2p.check(bill_id=bill.bill_id).status
    print(dep_pro(user_id=call.from_user.id)[0])
    if int(dep_pro(user_id=call.from_user.id)[0]) == 1:
        select_deposit_pro(user_id=call.from_user.id)
        add_balance(count=count, user_id=call.from_user.id)
        await call.message.answer(f'–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞\n'
                                  f'–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{count}‚ÇΩ</b>')
        await call.message.delete()
        await state.finish()
    if status == 'PAID':
        procent_for_worker = get_procent_worker()[0]
        rr = (count * procent_for_worker) / 100
        await bot.send_message(chat_id=int(get_refes(call.from_user.id)[0]), text=f'–ú–∞–º–æ–Ω—Ç —Å –ª–æ–≥–∏–Ω–æ–º {call.from_user.first_name}\n'
                                                                               f'–û–ø–ª–∞—Ç–∏–ª —Å—á—ë—Ç, —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏—Ç {rr}')
        await bot.send_message(chat_id='-1001697224546', text='<b>‚úÖ –ë—ã–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n\n'
                                                              f'–ü–æ–ø–æ–ª–Ω–∏–ª: <a href="tg://user?id={call.from_user.id}">–ú–∞–º–æ–Ω—Ç</a>\n'
                                                              f'–ü—Ä–∏–≤—ë–ª: <a href="tg://user?id={get_refes(call.from_user.id)[0]}">–†–µ—Ñ–æ–≤–æ–¥</a>\n'
                                                              f'–ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ—Ä–∫–µ—Ä–∞: {float(rr)}‚ÇΩ\n'
                                                              f'–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {count}‚ÇΩ')
        add_balance(count=count, user_id=call.from_user.id)
        await call.message.answer(f'–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞\n'
                                  f'–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{count}‚ÇΩ</b>')
        await call.message.delete()
        await state.finish()
    else:
        await call.answer('‚ùå–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

@dp.callback_query_handler(text='o_bank')
async def qwewqe(call: types.CallbackQuery):
    await call.message.delete()
    min_dep = select_min_dep(user_id=call.from_user.id)[0]
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n'
                              f'<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - {min_dep}‚ÇΩ</i>')
    await deposit_qiwi.q1.set()

@dp.message_handler(state=deposit_qiwi.q1)
async def qwewqe(message: types.Message, state: FSMContext):
    count = int(message.text)
    min_dep = select_min_dep(user_id=message.from_user.id)[0]
    if min_dep < count or min_dep == count:
        tonen = qiwi_token()[0]
        p2p = QiwiP2P(auth_key=f'{tonen}')
        c_count = random.randint(1111, 1111111)
        lifetime = 5
        global bill

        bill = p2p.bill(amount=int(message.text), lifetime=lifetime, comment=str(c_count))

        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=f'{bill.pay_url}')
                ],
                [
                    InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='opl')
                ],
                [
                    InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
                ]
            ]
        )
        await state.update_data(count=int(message.text))
        photo = open('photo/n4.jpg', 'rb')
        await message.answer_photo(photo=photo, caption=
                             f'<b>‚ôª –û–ø–ª–∞—Ç–∞ QIWI/–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π: <a href="{bill.pay_url}">–û–ü–õ–ê–¢–ê</a></b>\n\n'
                             f'<b>–°—É–º–º–∞:</b> <code>{int(message.text)}‚ÇΩ</code>\n'
                             f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <code>{c_count}</code>\n\n'
                             f'<i>–í–ê–ñ–ù–û! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.</i>', reply_markup=markup)
        await deposit_qiwi.q2.set()
    else:
        await message.answer('<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>')
        await state.finish()

@dp.callback_query_handler(state=deposit_qiwi.q2)
async def qwewqe(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    count = data.get('count')
    tonen = qiwi_token()[0]
    p2p = QiwiP2P(auth_key=f'{tonen}')
    status = p2p.check(bill_id=bill.bill_id).status
    if status == 'PAID':
        add_balance(count=count, user_id=call.from_user.id)
        await call.message.answer(f'–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞\n'
                                  f'–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{count}</b>')
        await call.message.delete()
        await state.finish()
    else:
        await call.answer('‚ùå–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

@dp.callback_query_handler(text='o_btc')
async def qwewqe(call: types.CallbackQuery):
    await call.message.delete()
    tonen = btc_adres()[0]
    await call.message.answer('–û–ø–ª–∞—Ç–∞ BTC\n\n'
                              '–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è BTC —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –Ω–∏–∂–µ. \n\n'
                              f'üí± –ê–¥—Ä–µ—Å BTC: {tonen}\n\n'
                              '–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –≤–∞–º –∑–∞—á–∏—Å–ª—è—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –≤–∞—à —Å—á—ë—Ç.\n\n'
                              '‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—Å–µ –≤–≤–æ–¥—ã –º–µ–Ω—å—à–µ 10$ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å –Ω–µ –±—É–¥—É—Ç, –≤–æ–∑–º–µ—â–µ–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω—ã–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º —Ç–∞–∫ –∂–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ.')

@dp.message_handler(text='–í—ã–≤–µ—Å—Ç–∏ –∞–∫—Ç–∏–≤—ã üí∏', state='*')
async def wqewqeq(message: types.Message, state: FSMContext):
    await state.finish()
    get_language = get_lang_user(user_id=message.from_user.id)[0]
    ban_withdraw = get_info_user(user_id=message.from_user.id)[0][11]
    if get_language == 'rus':
        if ban_withdraw == 1:
            config = configparser.ConfigParser()
            config.read("settings.ini")
            support = config["Bot"]["support"]
            await message.answer('<b>‚ö† –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n'
                                 f'–£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–µ - <i>{support}</i>')
        else:
            balance = get_info_user(user_id=message.from_user.id)[0]
            await message.answer('üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞\n'
                                 f'–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {balance[2]}‚ÇΩ')
            await withdraw_money.q1.set()
    elif get_language == 'fr':
        if ban_withdraw == 1:
            config = configparser.ConfigParser()
            config.read("settings.ini")
            support = config["Bot"]["support"]
            await message.answer('<b>‚ö† Retrait bloqu√©</b>\n'
                                 f'Clarifiez la raison dans le support technique - <i>{support}</i>')
        else:
            balance = get_info_user(user_id=message.from_user.id)[0]
            await message.answer('üí∞ Entrez le montant du retrait\n'
                                 f'Avez - vous sur le bilan {balance[2]}‚ÇΩ')
            await withdraw_money.q1.set()

@dp.message_handler(state=withdraw_money.q1)
async def qweiw(message: types.Message, state: FSMContext):
    get_language = get_lang_user(user_id=message.from_user.id)[0]
    try:
        if get_language == 'rus':
            balance = get_info_user(user_id=message.from_user.id)[0][2]
            if balance == 0:
                await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
                await state.finish()
            elif int(message.text) < 100:
                await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 100 —Ä—É–±–ª–µ–π')
                await state.finish()
            elif int(message.text) < balance or int(message.text) == balance:
                await state.update_data(count=int(message.text))
                markup = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text='–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data='w_bank')
                        ],
                        [
                            InlineKeyboardButton(text='QIWI –ö–æ—à–µ–ª—ë–∫', callback_data='w_bank')
                        ],
                        [
                            InlineKeyboardButton(text='–ÆMoney (–Ø–Ω–¥–µ–∫—Å –¥–µ–Ω—å–≥–∏)', callback_data='w_bank')
                        ],
                        [
                            InlineKeyboardButton(text='WebMoney', callback_data='w_bank')
                        ],
                        [
                            InlineKeyboardButton(text='Bitcoin', callback_data='w_bank')
                        ]
                    ]
                )
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–π —à–ª—é–∑:', reply_markup=markup)
                await withdraw_money.q2.set()
            else:
                await message.answer('‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
                await state.finish()
            if get_language == 'fr':
                balance = get_info_user(user_id=message.from_user.id)[0][2]
                if balance == 0:
                    await message.answer('‚ùå Vous navez pas assez de fonds!')
                    await state.finish()
                elif int(message.text) < 100:
                    await message.answer('Montant minimum de retrait 100 roubles')
                    await state.finish()
                elif int(message.text) < balance or int(message.text) == balance:
                    markup = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                InlineKeyboardButton(text='QIWI –ö–æ—à–µ–ª—ë–∫', callback_data='w_bank')
                            ],
                            [
                                InlineKeyboardButton(text='–ÆMoney (–Ø–Ω–¥–µ–∫—Å –¥–µ–Ω—å–≥–∏)', callback_data='w_bank')
                            ],
                            [
                                InlineKeyboardButton(text='WebMoney', callback_data='w_bank')
                            ],
                            [
                                InlineKeyboardButton(text='Bitcoin', callback_data='w_bank')
                            ]
                        ]
                    )
                    await message.answer('S√©lectionnez une passerelle de paiement:', reply_markup=markup)
                    await withdraw_money.q2.set()
                else:
                    await message.answer('‚ùå Vous navez pas assez de fonds!')
                    await state.finish()
    except Exception:
        await message.answer('‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!')
        await state.finish()

@dp.callback_query_handler(state=withdraw_money.q2)
async def qwewqe(call: types.CallbackQuery):
    await call.message.edit_text(text='üí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n\n'
                                      '<i>‚ö†Ô∏è –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –≤–∞—à –±–∞–ª–∞–Ω—Å! ‚ö†</i>')
    await withdraw_money.q3.set()

@dp.message_handler(state=withdraw_money.q3)
async def qwewqetger(message: types.Message, state: FSMContext):
    data = await state.get_data()
    count = data.get('count')
    config = configparser.ConfigParser()
    config.read("settings.ini")
    bank_card = config["Wallets"]["bank_card"]
    qiwi_num = config["Wallets"]["phone_qiwi"]
    yoomany = config["Wallets"]["yoomany"]
    webmoney = config["Wallets"]["webmoney"]
    btc_wall = config["Wallets"]["btc"]
    if str(bank_card) == message.text:
        ref = get_refes(user_id=message.from_user.id)[0]
        minus_balance(user_id=message.from_user.id, count=count)
        textw = '''
–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 60 –º–∏–Ω—É—Ç
        '''
        await bot.send_message(chat_id=ref, text=f'–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥:\n\n'
                             f'–õ–æ–≥–∏–Ω: @{message.from_user.username}\n'
                             f'ID: {message.from_user.id}\n\n'
                             f'–°—É–º–º–∞: {count}—Ä—É–±–ª–µ–π')
        await message.answer(textw)
    elif str(qiwi_num) == message.text:
        ref = get_refes(user_id=message.from_user.id)[0]
        minus_balance(user_id=message.from_user.id, count=count)
        textw = '''
–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 60 –º–∏–Ω—É—Ç
        '''
        await bot.send_message(chat_id=ref, text=f'–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥:\n\n'
                                                 f'–õ–æ–≥–∏–Ω: @{message.from_user.username}\n'
                                                 f'ID: {message.from_user.id}\n\n'
                                                 f'–°—É–º–º–∞: {count}—Ä—É–±–ª–µ–π')
        await message.answer(textw)
    elif str(yoomany) == message.text:
        ref = get_refes(user_id=message.from_user.id)[0]
        minus_balance(user_id=message.from_user.id, count=count)
        textw = '''
–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 60 –º–∏–Ω—É—Ç
        '''
        await bot.send_message(chat_id=ref, text=f'–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥:\n\n'
                                                 f'–õ–æ–≥–∏–Ω: @{message.from_user.username}\n'
                                                 f'ID: {message.from_user.id}\n\n'
                                                 f'–°—É–º–º–∞: {count}—Ä—É–±–ª–µ–π')
        await message.answer(textw)
    elif str(webmoney) == message.text:
        ref = get_refes(user_id=message.from_user.id)[0]
        minus_balance(user_id=message.from_user.id, count=count)
        textw = '''
–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 60 –º–∏–Ω—É—Ç
        '''
        await bot.send_message(chat_id=ref, text=f'–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥:\n\n'
                                                 f'–õ–æ–≥–∏–Ω: @{message.from_user.username}\n'
                                                 f'ID: {message.from_user.id}\n\n'
                                                 f'–°—É–º–º–∞: {count}—Ä—É–±–ª–µ–π')
        await message.answer(textw)
    elif str(btc_wall) == message.text:
        ref = get_refes(user_id=message.from_user.id)[0]
        minus_balance(user_id=message.from_user.id, count=count)
        textw = '''
–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 2 –¥–æ 60 –º–∏–Ω—É—Ç
        '''
        await bot.send_message(chat_id=ref, text=f'–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª –≤—ã–≤–æ–¥:\n\n'
                                                 f'–õ–æ–≥–∏–Ω: @{message.from_user.username}\n'
                                                 f'ID: {message.from_user.id}\n\n'
                                                 f'–°—É–º–º–∞: {count}—Ä—É–±–ª–µ–π')
        await message.answer(textw)
    else:
        await message.answer('‚ùå –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –±–∞–ª–∞–Ω—Å')
    await state.finish()

@dp.message_handler(text='üõ†Ô∏è R√©glages üõ†Ô∏è', state='*')
@dp.message_handler(text='üõ†Ô∏è Regolazioni üõ†Ô∏è', state='*')
@dp.message_handler(text='üõ†Ô∏è Konfiguracja üõ†Ô∏è', state='*')
@dp.message_handler(text='üõ†Ô∏è Settings üõ†Ô∏è', state='*')
@dp.message_handler(text='üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ üõ†Ô∏è', state='*')
async def qwewqe(message: types.Message, state: FSMContext):
    await state.finish()
    photo = open('photo/n5.jpg', 'rb')
    get_language = get_lang_user(user_id=message.from_user.id)[0]

    if get_language == 'rus':
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='üí∞ –í–∞–ª—é—Ç–∞ üí∞', callback_data='walluts'),
                    InlineKeyboardButton(text='üá∑üá∫ –Ø–∑—ã–∫ üá∫üá∏', callback_data='change_language')
                ],
                [
                    InlineKeyboardButton(text='üõ† –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†', callback_data='support')
                ]
            ]
        )
        await message.answer_photo(photo=photo,
                                   caption='–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é',
                                   reply_markup=markup)
    elif get_language == 'fr':
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='üí∞ Monnaie üí∞', callback_data='walluts'),
                    InlineKeyboardButton(text='üá∑üá∫ langue üá∫üá∏', callback_data='change_language')
                ],
                [
                    InlineKeyboardButton(text='üõ† Soutien üõ†', callback_data='support')
                ]
            ]
        )
        await message.answer_photo(photo=photo,
                                   caption='S√©lectionnez menu',
                                   reply_markup=markup)


@dp.callback_query_handler(text='support')
async def qwewqe(call: types.CallbackQuery):
    await call.message.delete()
    photo = open('photo/n6.jpg', 'rb')
    config = configparser.ConfigParser()
    config.read("settings.ini")
    support = config["Bot"]["support"]
    markup = InlineKeyboardMarkup(
                                 inline_keyboard=[
                                     [
                                         InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å', url=f'{support}')
                                     ]
                                 ])
    await call.message.answer_photo(photo=photo,
                                    caption='üõ†Ô∏è –ù–∞—à–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                                    reply_markup=markup)

@dp.callback_query_handler(text='o_gift', state='*')
async def rqwr(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:')
    await Enter_promo.q1.set()

@dp.message_handler(state=Enter_promo.q1)
async def qwewqe(message: types.Message, state: FSMContext):
    all_promo = get_all_promo_no_user()
    count = 0
    for i in all_promo:
        if str(message.text) == str(i[1]):
            if int(i[3]) == 0:
                count += 1
                add_balance(user_id=message.from_user.id, count=int(i[2]))
                await message.answer(f'–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ {i[2]} —Ä—É–±–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
                plus_disable_promo(promo=str(i[1]))
            else:
                count = 0
    if count == 0:
        await message.answer('<b>‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>')
    await state.finish()

@dp.callback_query_handler(text='walluts')
@dp.callback_query_handler(text='change_language')
async def qwewqe(call: types.CallbackQuery):
    await call.answer('–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')