import configparser

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from database import get_all_user, get_all_workers, get_all_mamonts, get_all_user_id, add_balance, get_deposit_pro, \
    get_procent_worker, update_proc, info_trade, info_trade_update, btc_adres, qiwi_token, update_payments
from loader import dp, bot
from state.states import Mailing_message, new_proc_wokr, Pencilsad, InfoText, SetPayments

gl_admin_markup = ReplyKeyboardMarkup(resize_keyboard=True,
    keyboard=[
        [
            KeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
            KeyboardButton(text='üó£ –†–∞—Å—Å—ã–ª–∫–∞')
        ],
        [
            KeyboardButton(text='% –í—ã–ø–ª–∞—Ç'),
            KeyboardButton(text='‚öôÔ∏è –†—É—á–∫–∞')
        ],
        [
            KeyboardButton(text='–ò–∑–º. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'),
            KeyboardButton(text='–ò–∑–º. –ü–ª–∞—Ç–µ–∂–∫–∏')
        ],
        [
            KeyboardButton(text='–ù–∞–∑–∞–¥')
        ]
])

otmena = ReplyKeyboardMarkup(resize_keyboard=True,
    keyboard=[
        [
            KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
        ]
])

async def penciil(gaga):
    dada = gaga.split(':')
    if len(dada) == 4:
        name = dada[0]
        userrrname = dada[1]
        price = dada[2]
        on_proc = dada[3]
        config = configparser.ConfigParser()
        config.read("settings.ini")
        dep_channel = config['Admin']['kanal']
        comission = int((int(on_proc) * 0.01) * int(price))
        await bot.send_message(dep_channel, f'‚öúÔ∏è –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚öúÔ∏è\nüìà –°–µ—Ä–≤–∏—Å: {name} üìà\nüè¶ –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞: {comission}‚ÇΩ (- {100 - int(on_proc)} %)\nüí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {price}‚ÇΩ\nüèù –í–æ—Ä–∫–µ—Ä: {userrrname}')
        return True
    else:
        return False

async def Payments(gaga):
    dada = gaga.split(':')
    if len(dada) == 2:
        typee = dada[0]
        koshel = dada[1]
        update_payments(tap=typee, fap=koshel)
        return True
    else:
        return False

@dp.message_handler(commands='adm')
async def qwewqe(message: types.Message):
    config = configparser.ConfigParser()
    config.read("settings.ini")
    gl_admin = config["Admin"]["king_admin"]
    admin = config['Admin']['admin2']
    if int(gl_admin) == int(message.from_user.id) or int(admin) == int(message.from_user.id):
        await message.answer('üëë –í—ã <b>–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>',
                             reply_markup=gl_admin_markup)

@dp.message_handler(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def qwewqew(message: types.Message):
    config = configparser.ConfigParser()
    config.read("settings.ini")
    gl_admin = config["Admin"]["king_admin"]
    admin = config['Admin']['admin2']
    if int(gl_admin) == int(message.from_user.id) or int(admin) == int(message.from_user.id):
        all_count_user = get_all_user()[0]
        all_count_worker = get_all_workers()[0]
        all_count_mamonts = get_all_mamonts()[0]
        await message.answer('ü§ñ<b> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n'
                             f'üõó –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_count_user}\n'
                             f'üë∑ –í—Å–µ–≥–æ –≤–æ—Ä–∫–µ—Ä–æ–≤: {all_count_worker}\n'
                             f'üêò –í—Å–µ–≥–æ –º–∞–º–æ–Ω—Ç–æ–≤: {all_count_mamonts}')

@dp.message_handler(text='üó£ –†–∞—Å—Å—ã–ª–∫–∞')
async def wqewqefd(message: types.Message):
    config = configparser.ConfigParser()
    config.read("settings.ini")
    gl_admin = config["Admin"]["king_admin"]
    admin = config['Admin']['admin2']
    if int(gl_admin) == int(message.from_user.id) or int(admin) == int(message.from_user.id):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
        await Mailing_message.q1.set()

@dp.message_handler(state=Mailing_message)
async def qwewqewq(message: types.Message, state: FSMContext):
    all_user = get_all_user_id()
    count = 0
    count_blocked = 0
    for i in all_user:
        try:
            if i[0] == message.from_user.id:
                pass
            else:
                count += 1
                await bot.send_message(chat_id=f'{i[0]}', text=message.text)
        except Exception:
            count_blocked += 1
            pass
    await message.answer('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n'
                         f'–ü–æ–ª—É—á–∏–ª–∏: {count}\n'
                         f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {count_blocked}')
    await state.finish()

@dp.message_handler(text='‚öôÔ∏è –†—É—á–∫–∞')
async def wqewqefd(message: types.Message):
    config = configparser.ConfigParser()
    config.read("settings.ini")
    gl_admin = config["Admin"]["king_admin"]
    admin = config['Admin']['admin2']
    if int(gl_admin) == int(message.from_user.id) or int(admin) == int(message.from_user.id):
        await message.answer(f'<b>–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:@UserName:–°—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:–ü—Ä–æ—Ü–µ–Ω—Ç</b>\n<i>–ü—Ä–∏–º–µ—Ä:</i> <code>–ê—Ä–±–∏—Ç—Ä–∞–∂:@Gangster:1590:70</code>')
        await Pencilsad.q1.set()

@dp.message_handler(state=Pencilsad)
async def admin_8(message:types.Message,state:FSMContext):
    check = await penciil(message.text)
    if check is False:
        await message.answer('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>')
    else:
        await message.answer('<b>–£—Å–ø–µ—à–Ω–æ!</b>')
    await state.finish()

@dp.message_handler(text='% –í—ã–ø–ª–∞—Ç')
async def ojkiewq(message: types.Message):
    config = configparser.ConfigParser()
    config.read("settings.ini")
    gl_admin = config["Admin"]["king_admin"]
    admin = config['Admin']['admin2']
    if int(gl_admin) == int(message.from_user.id) or int(admin) == int(message.from_user.id):
        on_proc = get_procent_worker()[0]
        await message.answer(f'–°–µ–π—á–∞—Å % –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ <code>{on_proc}</code>\n\n'
                             f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞')
        await new_proc_wokr.q1.set()

@dp.message_handler(state=new_proc_wokr.q1)
async def jiewq(message: types.Message, state: FSMContext):
    update_proc(count=int(message.text))
    await message.answer(f'–ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞ <code>{message.text}</code>')
    await state.finish()

@dp.message_handler(text='–ò–∑–º. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
async def wqewqefd(message: types.Message):
    config = configparser.ConfigParser()
    config.read("settings.ini")
    gl_admin = config["Admin"]["king_admin"]
    admin = config['Admin']['admin2']
    text = info_trade()[0]
    if int(gl_admin) == int(message.from_user.id) or int(admin) == int(message.from_user.id):
        await message.answer(f'<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n\n{text}', reply_markup=otmena)
        await InfoText.q1.set()

@dp.message_handler(state=InfoText)
async def admin_8(message:types.Message,state:FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
    else:
        try:
            info_trade_update(text=message.text)
            await message.answer('–£—Å–ø–µ—à–Ω–æ.')
        except:
            await message.answer('–û—à–∏–±–∫–∞.')
    await message.answer('<b>–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é.</b>', reply_markup=gl_admin_markup)
    await state.finish()

@dp.message_handler(text='–ò–∑–º. –ü–ª–∞—Ç–µ–∂–∫–∏')
async def wqewqefd(message: types.Message):
    config = configparser.ConfigParser()
    config.read("settings.ini")
    gl_admin = config["Admin"]["king_admin"]
    admin = config['Admin']['admin2']
    qiwi = qiwi_token()[0]
    btc = btc_adres()[0]
    if int(gl_admin) == int(message.from_user.id) or int(admin) == int(message.from_user.id):
        await message.answer(f'<b>qiwi:</b> <code>{qiwi}</code>\n\n<b>btc:</b> <code>{btc}</code>\n\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –∏ –≤–∏–¥(qiwi, btc) –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n–ö–û–®–ï–õ–ï–ö:qiwi', reply_markup=otmena)
        await SetPayments.q1.set()

@dp.message_handler(state=SetPayments)
async def admin_8(message:types.Message,state:FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
    else:
        check = await Payments(message.text)
        if check is False:
            await message.answer('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>')
        else:
            await message.answer('<b>–£—Å–ø–µ—à–Ω–æ!</b>')
    await message.answer('<b>–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é.</b>', reply_markup=gl_admin_markup)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('opl_'))
async def qwewqe(call: types.CallbackQuery):
    await call.message.delete()
    calldata = call.data.replace('opl_', '')
    user_id = calldata.split('_')[0]
    get_deposit_pro(user_id=user_id)
    await call.message.answer('–£—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å –º–∞–º–æ–Ω—Ç—É –Ω—É–∂–Ω–∞ –Ω–∞–∂–∞—Ç—å " –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É "')
